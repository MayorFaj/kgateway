// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// GlobalRateLimitPolicyApplyConfiguration represents a declarative configuration of the GlobalRateLimitPolicy type for use
// with apply.
type GlobalRateLimitPolicyApplyConfiguration struct {
	Domain          *string                                 `json:"domain,omitempty"`
	Descriptors     []RateLimitDescriptorApplyConfiguration `json:"descriptors,omitempty"`
	RequestsPerUnit *int32                                  `json:"requestsPerUnit,omitempty"`
	Unit            *string                                 `json:"unit,omitempty"`
	ExtensionRef    *v1.LocalObjectReference                `json:"extensionRef,omitempty"`
	FailOpen        *bool                                   `json:"failOpen,omitempty"`
}

// GlobalRateLimitPolicyApplyConfiguration constructs a declarative configuration of the GlobalRateLimitPolicy type for use with
// apply.
func GlobalRateLimitPolicy() *GlobalRateLimitPolicyApplyConfiguration {
	return &GlobalRateLimitPolicyApplyConfiguration{}
}

// WithDomain sets the Domain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Domain field is set to the value of the last call.
func (b *GlobalRateLimitPolicyApplyConfiguration) WithDomain(value string) *GlobalRateLimitPolicyApplyConfiguration {
	b.Domain = &value
	return b
}

// WithDescriptors adds the given value to the Descriptors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Descriptors field.
func (b *GlobalRateLimitPolicyApplyConfiguration) WithDescriptors(values ...*RateLimitDescriptorApplyConfiguration) *GlobalRateLimitPolicyApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDescriptors")
		}
		b.Descriptors = append(b.Descriptors, *values[i])
	}
	return b
}

// WithRequestsPerUnit sets the RequestsPerUnit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequestsPerUnit field is set to the value of the last call.
func (b *GlobalRateLimitPolicyApplyConfiguration) WithRequestsPerUnit(value int32) *GlobalRateLimitPolicyApplyConfiguration {
	b.RequestsPerUnit = &value
	return b
}

// WithUnit sets the Unit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Unit field is set to the value of the last call.
func (b *GlobalRateLimitPolicyApplyConfiguration) WithUnit(value string) *GlobalRateLimitPolicyApplyConfiguration {
	b.Unit = &value
	return b
}

// WithExtensionRef sets the ExtensionRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExtensionRef field is set to the value of the last call.
func (b *GlobalRateLimitPolicyApplyConfiguration) WithExtensionRef(value v1.LocalObjectReference) *GlobalRateLimitPolicyApplyConfiguration {
	b.ExtensionRef = &value
	return b
}

// WithFailOpen sets the FailOpen field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailOpen field is set to the value of the last call.
func (b *GlobalRateLimitPolicyApplyConfiguration) WithFailOpen(value bool) *GlobalRateLimitPolicyApplyConfiguration {
	b.FailOpen = &value
	return b
}
